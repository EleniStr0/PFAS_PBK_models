}
# Remove the data that don't follow a trend from the high concentration data
for (i in 1:dim(Concentrations_high)[2]) {
if(names(data_100)[i] == "Muscle"){
observed_2[[i]] <- data_100[,i][-c(2,4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(2,4)] # Remove the 2nd and 4th muscle point
}else if(names(data_100)[i] == "Spleen"){
observed_2[[i]] <- data_100[,i][-c(4)]
predicted_2[[i]] <- Concentrations_high[,i][-c(4)] # remove the 4th spleen point
}else{
observed_2[[i]] <- data_100[,i]
predicted_2[[i]] <- Concentrations_high[,i]
}
}
comp_names <- c("Gill","Intestine","Liver",  "Brain","Spleen", "Muscle")
names(predicted_1) <- comp_names
names(predicted_2) <-names(predicted_1)
#discrepancy <- (fitness.metric(observed_1, predicted_1) + fitness.metric(observed_2, predicted_2))/2
discrepancy <- (AAFE(predicted_1, observed_1) + AAFE( predicted_2, observed_2))/2
}
predicted_2
observed_1
21*24
2780/1.24
2521/1.24
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/FPG.RData")
GA_results
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
load("~/GitHub/PBPK_Genetic_Algorithm/Kreyling/NLOPTR/FPG_nloptr.RData")
GA_results <- GA::ga(type = "real", fitness = ga_fitness,
lower = rep(1,16), upper = rep(8.999999,16),
population = "gareal_Population",
selection = "gareal_lsSelection",
crossover = "gareal_laCrossover",
mutation = "gareal_raMutation",
popSize =  60, #the population size.
pcrossover = 0.85, #the probability of crossover between pairs of chromosomes.
pmutation = 0.4, #the probability of mutation in a parent chromosome
elitism = 5, #the number of best fitness individuals to survive at each generation.
maxiter = 200, #the maximum number of iterations to run before the GA search is halted.
run = 50, # the number of consecutive generations without any improvement
#in the best fitness value before the GA is stopped.
keepBest = TRUE, # best solutions at each iteration should be saved in a slot called bestSol.
parallel = (parallel::detectCores()),
monitor =plot,
seed = 8080)
GA_results
22.7/0.599
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_projectseaice.csv")
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
head(sea_ice)
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
sea_ice$year <- as.Date(sea_ice$year)
#Delete unnecessary columns
sea_ice$Source.Data <- NULL
#Change column name to lower case.
sea_ice <- sea_ice %>%
rename_with(tolower)
str(sea_ice)
#Any missing value
sum(sea_ice$missing < 0)
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
library("tidyverse")
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
sea_ice <- read.csv("C:/Users/vassi/Documents/LAB/Giannis_project/seaice.csv")
str(sea_ice)
#Join year, month and day to a single column, then change the variable to date.
sea_ice <- sea_ice %>%
unite("year", Year:Month:Day, sep= "-")
sea_ice$year <- as.Date(sea_ice$year)
#Delete unnecessary columns
sea_ice$Source.Data <- NULL
#Change column name to lower case.
sea_ice <- sea_ice %>%
rename_with(tolower)
str(sea_ice)
#Any missing value
sum(sea_ice$missing < 0)
head(sea_ice)
sea_ice[which(sea_ice$hemisphere=="north"),]
test <- sea_ice
test <- sea_ice
test[which(test$hemisphere=="north"),][4]
test[which(test$hemisphere=="north"),][4] <- 0
head(test)
test <- sea_ice
test[which(test$hemisphere=="north"),][,4] <- 0
head(test)
test[,hemisphere=="north"]
levels(test)
levels(test$hemisphere)
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
test <- sea_ice
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
head(test)
head(test,100)
tail(test,100)
levels(test$hemisphere)
test <- sea_ice
levels(test$hemisphere)
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library("tidyverse")
library("ggplot2")
library("plotly")
install.packages("viridis")
library("viridis")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
install.packages("hrbrthemes")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library("hrbrthemes")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test$hemisphere[1,4]
test[1,4]
sea_ice[1,4]
head(test)
test <- sea_ice
levels(test$hemisphere)[levels(test$hemisphere) %in% c("north", "south")] <- c(0,1)
tail(test,100)
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
warnings()
test %>%
ggplot(aes(x=hemisphere, y=extent, fill=hemisphere)) +
#scale_fill_viridis(values=c()) +
geom_jitter(color="black", size=0.4, alpha=0.4) +
geom_boxplot() +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
exp(-2)
log(0.9)
log(-1.5)
exp(-1.5)
load("~/GitHub/TiO2_aggregation_and_uptake/Exposure/Combinated_fit/test_2_lbub.RData")
Chen_2019_datalist$C1_data$`TiO2-25R`
cbind(Chen_2019_datalist$C1_data$Time, Chen_2019_datalist$C1_data$`TiO2-25R`)
cbind(Fan_2016_datalist$C1_data$Time, Fan_2016_datalist$C1_data$`TiO2-T1`)
cbind(Chen_2019_datalist$C1_data$Time, Chen_2019_datalist$C2_data$`TiO2-25R`)
cbind(Fan_2016_datalist$C1_data$Time, Fan_2016_datalist$C2_data$`TiO2-T1`)
cbind(Chen_2019_datalist$C1_data$Time, Chen_2019_datalist$C3_data$`TiO2-25R`)
cbind(Fan_2016_datalist$C1_data$Time, Fan_2016_datalist$C3_data$`TiO2-T1`)
0.16*1.5^2.52
plot(density(rlnorm(1000,662,150)))
plot(density(rnorm(1000,662,150)))
?rlnorm
plot(density(rlnorm(1000,662,150)))
plot(density(rlnorm(1000,log(662),log(150))))
mu <- 662
v <- 150^2
v
mu
mu_star <- log(mu/sqrt(v/m^2 +1))
mu_star <- log(mu/sqrt(v/mu^2 +1))
mu_star
v_star <- log(v/mu^2 +1)
v_star
plot(density(rlnorm(1000, mu_star, v_star)))
log(300)
log(5000)
plot(density(rlnorm(1000, 5.8, 0.37)))
exp(5.8-0.37^2)
exp(log(300)-0.37^2)
exp(5.8)
abline(v=300)
abline(v=exp(5.8-0.37^2))
exp(5.8)
exp(5.8 - 0.37^2)
exp(5.8 + (0.37^2)/2)
abline(v=353.7003)
mu <- 662
v <- 150^2
v
mu
mu_star <- log(mu/sqrt(v/mu^2 +1))
mu_star
v_star <- log(v/mu^2 +1)
v_star
plot(density(rlnorm(1000, mu_star, v_star)))
?rlnorm
library(deSolve)
setwd('C:/Users/vassi/Documents/GitHub/PFAS_PBK_models/Loccisano et al.2011/Human_model')
create.params <- function(user_input){
with(as.list(user_input),{
# Physiological parameters (from Brown, et al 1997)
#fractional blood flows
QCC = 12.5 		# Cardiac blood output (L/h/kg^0.75)
QFC = 0.052		# Fraction cardiac output going to fat
QLC = 0.25 		# Fraction cardiac output going to liver
QKC = 0.175		# Fraction cardiac output going to kidney
#QfilC = 0.035		# Fraction cardiac output to the filtrate compartment (20% of kidney blood flow)
QSkC = 0.058	# Fraction cardiac output going to skin
QGC = 0.181		# Fraction cardiac output going to gut
#fractional tissue volumes
VLC = 0.026		# Fraction liver volume
VFC = 0.214		# Fraction fat volume
VKC = 0.004		# Fraction kidney volume
VfilC = 0.0004	# Fraction filtrate compartment volume (10% of kidney volume)
VGC = 0.0171		# Fraction gut volume
VPlasC = 0.0428	# Fraction plasma volume (58% of blood)
Htc = 0.44    # hematocrit
# for dermal exposure
# Dermal exposure
Dermconc <- 0.0		# Dermal concentration (mg/mL)
Dermvol <- 0.0		  # Dermal exposure volume (mL)
Dermdose <- Dermconc*Dermvol*1000  # (ug)
Skinarea = 5		#Exposed area on skin (cm^2)
SkinTarea = 9.1*((BW*1000)**0.666)	  # Total area of skin (cm^2)
Skinthickness = 0.1	                  # Skin thickness (cm)
# Scaling parameters
QC = QCC*BW**0.75	# Cardiac output (L/h)
QCP = QC*(1-Htc)	# adjust for plasma flow
QL = QLC*QCP			# Plasma flow to liver (L/h)
QF = QFC*QCP			# Plasma flow to fat (L/h)
QK = QKC*QCP	    # Plasma flow to kidney (L/h)
Qfil = 0.2*QK		  # Plasma flow to filtrate compartment (L/h)# 20% of QK
QG = QGC*QCP		  # Plasma flow to gut (L/h)
QSk <- ifelse(Dermconc > 0, QSkC*QCP*(Skinarea/SkinTarea), 0.0) # plasma flow to skin
#QSk <- QSkC*QCP*(Skinarea/SkinTarea) # plasma flow to skin
QR = QCP - QL - QF - QK - Qfil - QG - QSk	# Plasma flow to rest of the body (L/h)
Qbal = QCP - (QL+QF+QK+Qfil+QG+QSk+QR)       # balance check--better be 0
VL = VLC*BW			# Liver volume (L)
VF = VFC*BW			# Fat volume (L)
VK = VKC*BW			# Kidney volume (L)
Vfil = VfilC*BW			# Fitrate compartment volume (L)
VG = VGC*BW			# Gut volume (L)
VPlas = VPlasC*BW		# Plasma volume (L)
VSk = (Skinarea*Skinthickness)/1000	                                    # Skin volume (L)
VR = 0.84*BW - VL - VF - VK - Vfil - VG - VPlas - VSk	          # Rest of the body volume (L)
Vbal = (0.84*BW)-(VL+VF+VK+Vfil+VG+VPlas+VSk+VR)               # Balance check--better be 0
if(substance == 'PFOS'){
# Chemical-specific parameters (PFOS)
Tmc = 3.5			# Maximum resorption rate (mg/h/kg^(0.75))
Kt = 0.023		# Resorption affinity (mg/L)
Free = 0.025	# Free fraction of PFOS in plasma
PL = 3.72			# Liver/blood partition coefficient
PF = 0.14			# Fat/blood partition coefficient
PK = 0.8			# Kidney/blood partition coefficient
PSk = 0.29		# Skin/blood partition coefficient
PR = 0.2			# Rest of the body/blood partition coefficient
PG = 0.57     # Gut/blood partition coeff.
kurinec = 0.001		# urinary elimination rate constant  (/h/kg^-0.25)# estimated from Harada, et al 2005
} else if(substance == 'PFOA'){
# Chemical-specific parameters (PFOA)
Tmc = 10			# Maximum resorption rate (mg/h/kg^(0.75))
Kt = 0.055		# Resorption affinity (mg/L)
Free = 0.02		# Free fraction of PFOA in plasma# same as monkey
PL = 2.2			# Liver/plasma partition coefficient
PF = 0.04			# Fat/plasma partition coefficient
PK = 1.05			# Kidney/plasma partition coefficient
PSk = 0.1			# Skin/plasma partition coefficient
PR = 0.12			# Rest of the body/plasma partition coefficient
PG = 0.05     # Gut/blood plasma coeff.
kurinec = 0.0003		# Elimination rate (1/h)# estimated from data of Harada, et al 2005
}
kurine = kurinec*BW**(-0.25)
Tm = Tmc*BW**0.75   #transporter maximum
# Free fraction of chemical in tissues
FreeL = Free/PL  #liver
FreeF = Free/PF  #fat
FreeK = Free/PK  #kidney
FreeSk = Free/PSk #skin
FreeR = Free/PR  #rest of tissues
FreeG = Free/PG  #gut
return(list('QC'=QC, 'QCP'=QCP, 'QL'=QL, 'QF'=QF, 'QK'=QK,
'Qfil'=Qfil, 'QG'=QG, 'QSk'=QSk, 'QR'=QR,
'VPlas'=VPlas, 'VL'=VL, 'VF'=VF, 'VK'=VK,
'Vfil'=Vfil, 'VG'=VG, 'VSk'=VSk, 'VR'=VR,
'PL'=PL, 'PF'=PF, 'PK'=PK, 'PSk'=PSk,
'PG'=PG, 'PR'=PR,
'Tm'=Tm, 'Kt'=Kt, 'Free'=Free,
'FreeL'=FreeL, 'FreeF'=FreeF, 'FreeK'=FreeK,
'FreeSk'=FreeSk, 'FreeR'=FreeR, 'FreeG'=FreeG,
'kurine'=kurine,
'C_water'=C_water,
'C_water_times'=C_water_times,
'IV_intake_hourly'=IV_intake_hourly,
'IV_times'=IV_times,
'Drinking_rate'=Drinking_rate
))
})
}
create.inits <- function(parameters){
with(as.list(parameters),{
APlas<-0; AG<-0; AL<-0; AK<-0; AF<-0; Afil<-0; AStore<-0; AUrine<-0; ASk<-0;
AR<-0; C_water<-0; IV_intake<-0
return(c('APlas'=APlas, 'AG'=AG, 'AL'=AL, 'AF'=AF, 'AK'=AK,
'Afil'=Afil, 'AStore'=AStore, 'AUrine'=AUrine, 'ASk'=ASk,
'AR'=AR, 'C_water'=C_water, 'IV_intake'=IV_intake))
})
}
create.events <- function(parameters){
with(as.list(parameters),{
C_water_times <- C_water_times #hours
C_water_values <- C_water #ug/L
C_water_ltimes <- length(C_water_times)
IV_intake_hourly <- IV_intake_hourly
IV_times <- IV_times
IV_ltimes <- length(IV_times)
events <- data.frame(var = c(rep('C_water', C_water_ltimes), rep('IV_intake', IV_ltimes)),
time = c(C_water_times,IV_times),
value = c(C_water_values,IV_intake_hourly),
method = rep('rep',C_water_ltimes+IV_ltimes))
events <- events[order(events$time),]
return(list(data=events))
})
}
ode.func <- function(time, inits, params){
with(as.list(c(inits, params)),{
# Concentrations
CPlas <- APlas/VPlas # Concentration in plasma
CG <- AG/VG # Concentration in gut
CL <- AL/VL # Concentration in liver
CF <- AF/VF # Concentration in fat
CK <- AK/VK # Concentration in kidney
Cfil <- Afil/Vfil # Concentration in filtrate
CSk <- ASk/VSk # Concentration in skin
CR <- AR/VR
# Plasma Compartment
dAPlas <- QF*CF*FreeF + (QL+QG)*CL*FreeL + QR*CR*FreeR + QSk*CSk*FreeSk +
QK*CK*FreeK - QCP*CPlas*Free + IV_intake
dIV_intake <- 0
# Gut compartment
dAG <- QG*(CPlas*Free - CG*FreeG) + C_water*Drinking_rate
# Liver compartment
dAL <- QL*CPlas*Free + QG*CG*FreeG - (QL+QG)*CL*FreeL
# Fat compartment
dAF <- QF*(CPlas*Free - CF*FreeF)
# Kidney compartment
dAK <- QK*(CPlas*Free - CK*FreeK) + (Tm*Cfil)/(Kt+Cfil)
# Filtrate compartment
dAfil = Qfil*(CPlas*Free - Cfil) - (Tm*Cfil)/(Kt+Cfil)
# Storage compartment
dAStore <- Qfil*Cfil - kurine*AStore
# Urine
dAUrine <- kurine*AStore
# Skin compartment
dASk <- QSk*(CPlas*Free-CSk*FreeSk) #+ input4*DoseOn
# Rest of the body
dAR <- QR*(CPlas*Free - CR*FreeR)
# Water concentration
dC_water <- 0
return(list(c('dAPlas'=dAPlas, 'dAG'=dAG, 'dAL'=dAL, 'dAF'=dAF,
'dAK'=dAK, 'dAfil'=dAfil, 'dAStore'=dAStore,
'dAUrine'=dAUrine, 'dASk'=dASk, 'dAR'=dAR, 'dC_water'=dC_water,
'dIV_intake'=dIV_intake),
'CPlas'=CPlas, 'CG'=CG, 'CL'=CL, 'CF'=CF,
'CK'=CK, 'Cfil'=Cfil, 'CSk'=CSk, 'CR'=CR))
})
}
################################################################################
reproduce_results <- function(user_input){
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
solution <- data.frame(ode(times = sample_time,  func = ode.func, y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
plasma_plot <- plot(solution$time/24/360, solution$CPlas)
plasma_plot <- recordPlot(plasma_plot)
return(list(plasma_plot, max(solution[,'CPlas'])))
}
# reproduce results in figure 8 and figure 9
BW = 70 # kg
substance <- 'PFOA'
C_water <- c(3.55,0) # ug/L
C_water_times <- c(0, 30*24*360)
IV_intake_hourly <- c(0) # ug/h
IV_times <- c(0)
Drinking_rate <- BW*11/1000/24 # L/h
sample_time <- seq(0,50*360*24,24)
Drinking_rate <- BW*11/1000/24 # L/h
user_input <- list('BW'=BW, 'substance'=substance,
'C_water'=C_water,
'C_water_times'=C_water_times,
'IV_intake_hourly'=IV_intake_hourly,
'IV_times'=IV_times,
'Drinking_rate'=Drinking_rate,
'sample_time'=sample_time)
fig9 = reproduce_results(user_input)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
solution <- data.frame(ode(times = sample_time,  func = ode.func, y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
tail(solution)
# reproduce figure 13
BW = 70 # kg
substance <- 'PFOA'
C_water <- c(0) # ug/L
C_water_times <- c(0)
IV_intake_hourly <- c((2.9e-04)*BW/24) # ug/h
IV_times <- c(0)
Drinking_rate <- BW*11/1000/24 # L/h
sample_time <- seq(0,50*360*24,24)
user_input <- list('BW'=BW, 'substance'=substance,
'C_water'=C_water,
'C_water_times'=C_water_times,
'IV_intake_hourly'=IV_intake_hourly,
'IV_times'=IV_times,
'Drinking_rate'=Drinking_rate,
'sample_time'=sample_time)
params <- create.params(user_input)
inits <- create.inits(params)
events <- create.events(params)
solution <- data.frame(ode(times = sample_time,  func = ode.func, y = inits, parms = params,
events = events,
method="lsodes",rtol = 1e-05, atol = 1e-05))
tail(solution)
